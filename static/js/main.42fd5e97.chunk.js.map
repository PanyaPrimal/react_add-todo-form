{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","api/todos.ts","App.tsx","index.tsx"],"names":["UserInfo","user","name","email","className","href","TodoInfo","todo","id","completed","title","cn","TodoList","todos","map","username","userId","getUser","usersFromServer","find","App","initialTodos","todosFromServer","useState","setTodos","setTitle","selectedUserId","setSelectedUserId","formErrors","setFormErrors","selectedUserIdName","onSubmit","event","preventDefault","prevErrors","trim","newId","reduce","maxId","item","Math","max","newUser","newTodo","type","value","placeholder","onChange","target","selectedValue","Number","userFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.42fd5e97.chunk.js","sourcesContent":["import { FC } from 'react';\n\nexport type User = {\n  id: number,\n  name: string,\n  email: string,\n};\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: FC<Props> = ({ user }) => {\n  const { name, email } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import { FC } from 'react';\nimport cn from 'classnames';\nimport { UserInfo, User } from '../UserInfo';\n\nexport type Todo = {\n  id: number,\n  userId: number,\n  title: string,\n  completed: boolean,\n  user: User | null,\n};\n\ntype Props = {\n  todo: Todo,\n};\n\nexport const TodoInfo: FC<Props> = ({ todo }) => {\n  const {\n    id, completed, title, user,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={cn('TodoInfo', { 'TodoInfo--completed': completed })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user && (\n        <UserInfo user={user} />\n      )}\n    </article>\n  );\n};\n","import { FC } from 'react';\nimport { Todo, TodoInfo } from '../TodoInfo';\n\ntype Todos = {\n  todos: Todo[];\n};\n\nexport const TodoList:FC<Todos> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map((todo) => (\n      <TodoInfo key={todo.id} todo={todo} />\n    ))}\n  </section>\n);\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import './App.scss';\nimport { useState, FC, ChangeEvent } from 'react';\nimport { TodoList } from './components/TodoList';\nimport { User } from './components/UserInfo';\nimport { Todo } from './components/TodoInfo';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nfunction getUser(userId: number): User | null {\n  const foundedUser = usersFromServer.find(user => user.id === userId);\n\n  return foundedUser || null;\n}\n\nexport const App: FC = () => {\n  const initialTodos = todosFromServer.map(todo => ({\n    ...todo,\n    user: getUser(todo.userId),\n  }));\n\n  const [todo, setTodos] = useState<Todo[]>(initialTodos);\n\n  const [title, setTitle] = useState('');\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [formErrors, setFormErrors]\n    = useState<{ title?: string, user?: string }>({});\n\n  const handleFormSubmit = (event: ChangeEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!selectedUserId) {\n      setFormErrors((prevErrors) => ({\n        ...prevErrors,\n        user: 'Please choose a user',\n      }));\n    }\n\n    if (title.trim() === '') {\n      setFormErrors((prevErrors) => ({\n        ...prevErrors,\n        title: 'Please enter a title',\n      }));\n    }\n\n    if (selectedUserId && title.trim() !== '') {\n      const newId\n        = todo.reduce((maxId, item) => Math.max(maxId, item.id), 0) + 1;\n\n      const newUser = getUser(selectedUserId);\n\n      const newTodo: Todo = {\n        id: newId,\n        title: title.trim(),\n        userId: selectedUserId,\n        completed: false,\n        user: newUser,\n      };\n\n      setTodos([...todo, newTodo]);\n      setTitle('');\n      setSelectedUserId(0);\n      setFormErrors({});\n    }\n  };\n\n  const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n\n    if (name === 'title') {\n      setTitle(value);\n      setFormErrors(prevErrors => ({ ...prevErrors, title: '' }));\n    }\n  };\n\n  const handleUserChange = (event: ChangeEvent<HTMLSelectElement>) => {\n    const selectedValue = Number(event.target.value);\n\n    setSelectedUserId(selectedValue);\n    setFormErrors(prevErrors => ({ ...prevErrors, user: '' }));\n  };\n\n  const selectedUserIdName = selectedUserId\n    ? usersFromServer.find(user => user.id === selectedUserId)?.name\n    : '';\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"field\">\n          <input\n            type=\"text\"\n            name=\"title\"\n            value={title}\n            placeholder=\"Enter a title\"\n            onChange={handleInputChange}\n            data-cy=\"titleInput\"\n          />\n\n          {formErrors.title\n            && <span className=\"error\">{formErrors.title}</span>}\n        </div>\n\n        <div className=\"field\">\n          <select\n            data-cy=\"userSelect\"\n            value={selectedUserId}\n            onChange={handleUserChange}\n          >\n            <option value={0}>Choose a user</option>\n            {usersFromServer.map(userFromServer => (\n              <option\n                value={userFromServer.id}\n                key={userFromServer.id}\n              >\n                {userFromServer.name}\n              </option>\n            ))}\n          </select>\n\n          {formErrors.user && <span className=\"error\">{formErrors.user}</span>}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      {selectedUserIdName && <p>{`Selected user: ${selectedUserIdName}`}</p>}\n\n      <TodoList todos={todo} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}