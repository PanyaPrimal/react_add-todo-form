{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","api/todos.ts","App.tsx","index.tsx"],"names":["UserInfo","user","name","email","className","href","TodoInfo","todo","id","completed","title","cn","TodoList","todos","map","username","userId","getUser","usersFromServer","find","App","useState","todosFromServer","currentTodos","setTodos","setTitle","selectedUser","setSelectedUser","formErrors","setFormErrors","selectedUserName","onSubmit","event","preventDefault","prevErrors","trim","newId","reduce","maxId","Math","max","newUser","newTodo","type","value","placeholder","onChange","target","selectedUserId","Number","userFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2c0789ab.chunk.js","sourcesContent":["import { FC } from 'react';\n\nexport type User = {\n  id: number,\n  name: string,\n  email: string,\n};\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: FC<Props> = ({ user }) => {\n  const { name, email } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import { FC } from 'react';\nimport cn from 'classnames';\nimport { UserInfo, User } from '../UserInfo';\n\nexport type Todo = {\n  id: number,\n  userId: number,\n  title: string,\n  completed: boolean,\n  user: User | null,\n};\n\ntype Props = {\n  todo: Todo,\n};\n\nexport const TodoInfo: FC<Props> = ({ todo }) => {\n  const {\n    id, completed, title, user,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={cn('TodoInfo', { 'TodoInfo--completed': completed })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user && (\n        <UserInfo user={user} />\n      )}\n    </article>\n  );\n};\n","import { FC } from 'react';\nimport { Todo, TodoInfo } from '../TodoInfo';\n\ntype Todos = {\n  todos: Todo[];\n};\n\nexport const TodoList:FC<Todos> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map((todo) => (\n        <TodoInfo key={todo.id} todo={todo} />\n      ))}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import './App.scss';\nimport { useState, FC, ChangeEvent } from 'react';\nimport { TodoList } from './components/TodoList';\nimport { User } from './components/UserInfo';\nimport { Todo } from './components/TodoInfo';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nfunction getUser(userId: number): User | null {\n  const foundedUser = usersFromServer.find(user => user.id === userId);\n\n  return foundedUser || null;\n}\n\nexport const App: FC = () => {\n  const [currentTodos, setTodos] = useState<Todo[]>(todosFromServer\n    .map(todo => ({\n      ...todo,\n      user: getUser(todo.userId),\n    })));\n\n  const [title, setTitle] = useState('');\n  const [selectedUser, setSelectedUser] = useState<number>(0);\n  const [formErrors, setFormErrors]\n    = useState<{ title?: string, user?: string }>({});\n\n  const handleFormSubmit = (event: ChangeEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!selectedUser) {\n      setFormErrors((prevErrors) => ({\n        ...prevErrors,\n        user: 'Please choose a user',\n      }));\n    }\n\n    if (title.trim() === '') {\n      setFormErrors((prevErrors) => ({\n        ...prevErrors,\n        title: 'Please enter a title',\n      }));\n    }\n\n    if (selectedUser && title.trim() !== '') {\n      const newId\n        = currentTodos.reduce((maxId, todo) => Math.max(maxId, todo.id), 0) + 1;\n\n      const newUser = getUser(selectedUser);\n\n      const newTodo: Todo = {\n        id: newId,\n        title: title.trim(),\n        userId: selectedUser,\n        completed: false,\n        user: newUser,\n      };\n\n      setTodos([...currentTodos, newTodo]);\n      setTitle('');\n      setSelectedUser(0);\n      setFormErrors({});\n    }\n  };\n\n  const handleInputChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n\n    if (name === 'title') {\n      setTitle(value);\n      setFormErrors(prevErrors => ({ ...prevErrors, title: '' }));\n    }\n  };\n\n  const handleUserChange = (event: ChangeEvent<HTMLSelectElement>) => {\n    const selectedUserId = Number(event.target.value);\n\n    setSelectedUser(selectedUserId);\n    setFormErrors(prevErrors => ({ ...prevErrors, user: '' }));\n  };\n\n  const selectedUserName = selectedUser\n    ? usersFromServer.find(user => user.id === selectedUser)?.name\n    : '';\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"field\">\n          <input\n            type=\"text\"\n            name=\"title\"\n            value={title}\n            placeholder=\"Enter a title\"\n            onChange={handleInputChange}\n            data-cy=\"titleInput\"\n          />\n\n          {formErrors.title\n            && <span className=\"error\">{formErrors.title}</span>}\n        </div>\n\n        <div className=\"field\">\n          <select\n            data-cy=\"userSelect\"\n            value={selectedUser}\n            onChange={handleUserChange}\n          >\n            <option value={0}>Choose a user</option>\n            {usersFromServer.map(userFromServer => (\n              <option\n                value={userFromServer.id}\n                key={userFromServer.id}\n              >\n                {userFromServer.name}\n              </option>\n            ))}\n          </select>\n\n          {formErrors.user && <span className=\"error\">{formErrors.user}</span>}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      {selectedUserName && <p>{`Selected user: ${selectedUserName}`}</p>}\n\n      <TodoList todos={currentTodos} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}